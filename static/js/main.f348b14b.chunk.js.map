{"version":3,"sources":["App.js","buttons.js","reportWebVitals.js","index.js"],"names":["App","useState","isdark","setIsdark","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","eval","toString","remove","calculate","className","onClick","type","placeholder","readOnly","buttons","map","bttn","id","btnclass","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f348b14b.chunk.js","sourcesContent":["import {useState} from 'react';\nimport './App.css';\nimport buttons from './buttons';\nfunction App() {\n  const [isdark, setIsdark]= useState(false);\n  const [calc, setCalc] = useState('');\n  const [result, setResult] = useState('');\n  const ops = ['/','+','-','*','.'];\n  const updateCalc = (value)=> {\n\tif((ops.includes(value) && calc==='') || (ops.includes(value) && ops.includes(calc.slice(-1)))){\n\t\treturn;\n\t}\n\tsetCalc(calc+value);\n\tif(!ops.includes(value)){\n\t\tsetResult(eval(calc+value).toString());\n\t}\n  }\n  const remove = ()=>{\n\t  if(calc === ''){\n\t\t  setResult('0');\n\t\t  return\n\t  }\n\t  const value = calc.slice(0, -1);\n\t  setCalc(value.toString())\n  }\n  const calculate = () =>{\n\t  setCalc(eval(calc).toString());\n  }\n  return (\n\t<>\n\t\t<div className=\"modebtn\">\n\t\t\t<p>Switch To </p>\n\t\t\t<button className=\"dark\" onClick={()=>setIsdark(true)}>Dark </button>\n\t\t\t<p>/</p>\n\t\t\t<button className=\"light\" onClick={()=>setIsdark(false)}>Light</button>\n\t\t\t<p>Mode </p>\n\t\t</div>\n\t\t<div className=\"App\">\n\t\t\t<div className={`calculator ${(isdark)?'dark':'light'}`}>\n\t\t\t<div className=\"display\">\n\t\t\t\t{ (calc) && <input type=\"text\" placeholder=\"0\" readOnly className={`digitArea ${(isdark)?'dark':'light'}`} value={result} /> }\n\t\t\t\t<input type=\"text\" className={`digitArea ${(isdark)?'dark':'light'}`} value={calc} placeholder=\"0\"  />\n\t\t\t</div>\n\t\t\t<div className=\"buttonsArea\">\n\t\t\t{\n\t\t\t\tbuttons.map(bttn=>{\n\t\t\t\tconst {id, type,value}= bttn;\n\t\t\t\tlet btnclass = (type === 'num')?(isdark)?'dark':'light':(type === 'clr')?(isdark)?'darkdel':'lightdel':'yellow';\n\t\t\t\tif(type === 'calc'){btnclass = 'green';}\n\t\t\t\treturn(<button key={id} className={btnclass} onClick={()=>(value !=='C' && value!=='=')?`${updateCalc(value)}`:(value ==='C')?remove():calculate()} >{value}</button>)\n\t\t\t\t})\n\t\t\t}\n\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</>\n  );\n}\n\nexport default App;\n","const buttons = [\r\n    {\r\n        id:1,\r\n        type:'num',\r\n        value:7\r\n    },\r\n    {\r\n        id:2,\r\n        type:'num',\r\n        value:8\r\n    },\r\n    {\r\n        id:3,\r\n        type:'num',\r\n        value:9\r\n    },\r\n    {\r\n        id:4,\r\n        type:'clr',\r\n        value:'C'\r\n    },\r\n    {\r\n        id:5,\r\n        type:'num',\r\n        value:4\r\n    },\r\n    {\r\n        id:6,\r\n        type:'num',\r\n        value:5\r\n    },\r\n    {\r\n        id:7,\r\n        type:'num',\r\n        value:6\r\n    },\r\n    {\r\n        id:8,\r\n        type:'opr',\r\n        value:'-'\r\n    },\r\n    {\r\n        id:9,\r\n        type:'num',\r\n        value:1\r\n    },\r\n    {\r\n        id:10,\r\n        type:'num',\r\n        value:2\r\n    },\r\n    {\r\n        id:11,\r\n        type:'num',\r\n        value:3\r\n    },\r\n    {\r\n        id:12,\r\n        type:'opr',\r\n        value:'+'\r\n    },\r\n    {\r\n        id:13,\r\n        type:'opr',\r\n        value:'.'\r\n    },\r\n    {\r\n        id:14,\r\n        type:'num',\r\n        value:0\r\n    },\r\n    {\r\n        id:15,\r\n        type:'opr',\r\n        value:'*'\r\n    },\r\n    {\r\n        id:16,\r\n        type:'opr',\r\n        value:'/'\r\n    },\r\n    {\r\n        id:17,\r\n        type:'calc',\r\n        value:'='\r\n    },\r\n];\r\nexport default buttons;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}